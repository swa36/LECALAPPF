import os
from django.db import models
from django.core.exceptions import ValidationError

# Create your models here.


class Product(models.Model):
    uuid_1C = models.UUIDField(unique=True, editable=False, verbose_name='UUUID class_1C')
    article_1C = models.CharField(max_length=255, verbose_name='–ê—Ä—Ç–∏–∫–ª 1–°')
    code_1C = models.CharField(max_length=255, verbose_name='–ö–æ–¥ 1–°', unique=True,)
    data_version = models.CharField(max_length=30, verbose_name='DataVersion')
    name = models.TextField(verbose_name='–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
    description = models.TextField(verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
    stock = models.PositiveIntegerField(verbose_name='–û—Å—Ç–∞—Ç–æ–∫', default=0)


    def __str__(self):
        return self.name


class NameAdditionalAttributes(models.Model):
    uuid_1C = models.UUIDField(unique=True, editable=False, verbose_name='UUID class_1C')
    name_attribute = models.CharField(max_length=50, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞')

class ValueAdditionalAttributes(models.Model):
    product = models.ForeignKey(Product, on_delete=models.CASCADE, related_name='additional_attributes', null=True)
    attribute_name = models.ForeignKey(NameAdditionalAttributes, on_delete=models.CASCADE, null=True)
    value_attribute = models.TextField( verbose_name='–ó–Ω–∞—á–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞')

    def __str__(self):
        return f"{self.attribute_name.name_attribute}: {self.value_attribute}"


class TypePrices(models.Model):
    uuid_1C = models.UUIDField(unique=True, editable=False, verbose_name='UUID class_1C')
    type_price = models.CharField(max_length=50, verbose_name='–¢–∏–ø —Ü–µ–Ω—ã')
    suffix = models.CharField(max_length=50, verbose_name='–ù–∞–≤–∑–∞–Ω–∏–µ –ø–æ–ª–µ–π –≤ Prices')


class Prices(models.Model):
    product = models.OneToOneField('Product', on_delete=models.CASCADE, related_name='prices', verbose_name='–¢–æ–≤–∞—Ä')
    cost_price = models.DecimalField(max_digits=10, decimal_places=2, default=0, verbose_name='–ó–∞–∫—É–ø–æ—á–Ω–∞—è —Ü–µ–Ω–∞')
    wholesale_price = models.DecimalField(max_digits=10, decimal_places=2, default=0, verbose_name='–û–ø—Ç–æ–≤–∞—è —Ü–µ–Ω–∞')
    wholesale_price_2 = models.DecimalField(max_digits=10, decimal_places=2, default=0, verbose_name='–û–ø—Ç–æ–≤–∞—è —Ü–µ–Ω–∞ 2')
    wholesale_price_3 = models.DecimalField(max_digits=10, decimal_places=2, default=0, verbose_name='–û–ø—Ç–æ–≤–∞—è —Ü–µ–Ω–∞ 3')
    retail_price = models.DecimalField(max_digits=10, decimal_places=2, default=0, verbose_name='–†–æ–∑–Ω–∏—á–Ω–∞—è —Ü–µ–Ω–∞')

    def __str__(self):
        return f"–¶–µ–Ω—ã –¥–ª—è {self.product.name}"

def image_upload_path(instance, filename):
    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∞—Ä—Ç–∏–∫—É–ª ‚Äî –ø—Ä–æ–¥—É–∫—Ç –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    code_1C = instance.product.code_1C
    if instance.main:
        filename = 'main.jpg'
    return f"img/{code_1C}/{filename}"  # –Ω–∞–ø—Ä–∏–º–µ—Ä: img/ABC123/main.jpg –∏–ª–∏ img/ABC123/1.jpg


class Images(models.Model):
    product = models.ForeignKey(
        'Product',
        on_delete=models.CASCADE,
        related_name='images',
        verbose_name='–ü—Ä–æ–¥—É–∫—Ç'
    )
    main = models.BooleanField(default=False, verbose_name='–ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')
    image = models.ImageField(upload_to=image_upload_path, verbose_name='–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')
    filename  = models.CharField(                     # üÜï –Ω–æ–≤–æ–µ –ø–æ–ª–µ
        max_length=255,
        db_index=True,
        verbose_name='–ò–º—è —Ñ–∞–π–ª–∞ (–±–µ–∑ –ø—É—Ç–∏)',
        default=''
    )

    class Meta:
        # —á—Ç–æ–±—ã —É –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ –±—ã–ª–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        unique_together = ('product', 'filename')
        verbose_name = '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
        verbose_name_plural = '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'

    def __str__(self):
        return f"{self.product.article_1C} | {'main' if self.main else os.path.basename(self.image.name)}"



class MarkUpItems(models.Model):
    wildberries_mark_up = models.IntegerField(default=12, verbose_name='–ù–∞—Ü–µ–Ω–∫–∞ –í–ë')
    ozon_mark_up = models.IntegerField(default=12, verbose_name='–ù–∞—Ü–µ–Ω–∫–∞ –û–ó–û–ù')
    yandex_mark_up = models.IntegerField(default=0, verbose_name='–ù–∞—Ü–µ–Ω–∫–∞ Yandex')
    avito_mark_up = models.IntegerField(default=0, verbose_name='–ù–∞—Ü–µ–Ω–∫–∞ –ê–≤–∏—Ç–æ')
    aliexpress_mark_up = models.IntegerField(default=0, verbose_name='–ù–∞—Ü–µ–Ω–∫–∞ –ê–ª–∏')

    def clean(self):
        if not self.pk and MarkUpItems.objects.exists():
            raise ValidationError("–ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –Ω–∞—Ü–µ–Ω–∫–∏.")

    def __str__(self):
        return "–ü—Ä–æ—Ü–µ–Ω—Ç –Ω–∞—Ü–µ–Ω–∫–∏"

    class Meta:
        verbose_name = '–ù–∞—Ü–µ–Ω–∫–∞'
        verbose_name_plural = '–ù–∞—Ü–µ–Ω–∫–∏'